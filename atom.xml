<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SUNTFの博客</title>
  
  <subtitle>记录、分析</subtitle>
  <link href="https://suntf.github.io/atom.xml" rel="self"/>
  
  <link href="https://suntf.github.io/"/>
  <updated>2021-09-24T05:43:57.250Z</updated>
  <id>https://suntf.github.io/</id>
  
  <author>
    <name>suntf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>怎么在Java中自定义注解</title>
    <link href="https://suntf.github.io/2021/09/24/Java/%E6%80%8E%E4%B9%88%E5%9C%A8Java%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://suntf.github.io/2021/09/24/Java/%E6%80%8E%E4%B9%88%E5%9C%A8Java%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-09-24T05:06:09.000Z</published>
    <updated>2021-09-24T05:43:57.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h1><p>注解是JDK1.5引入的新特性，主要用于简化代码，提高编程的效率。其实在日常开发中，注解并不少见，比如Java内置的<code>@Override</code>、<code>@SuppressWarnings</code>，或者Spring提供的<code>@Service</code>、<code>@Controller</code>等等，随着这些注解使用的频率越来越高，作为开发人员当真有必要深入学习一番。</p><h1 id="Java内置的注解"><a href="#Java内置的注解" class="headerlink" title="Java内置的注解"></a>Java内置的注解</h1><p>先说说Java内置的三个注解，分别是：</p><p><code>@Override</code>：检查当前的方法定义是否覆盖父类中的方法，如果没有覆盖，编译器就会报错。</p><p><code>@SuppressWarnings</code>：忽略编译器的警告信息。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110831_b4c5c27d_1461398.png" title="zhujie_3.png"></p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110859_b54c15fe_1461398.png" alt="输入图片说明" title="zhujie_4.png"></p><p><code>@Deprecated</code>：用于标识该类或方法已过时，建议开发人员不要使用该类或方法。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110802_27772822_1461398.png" alt="输入图片说明" title="zhujie_1.png"></p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110815_ca82ffe9_1461398.png" alt="输入图片说明" title="zhujie_2.png"></p><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>元注解其实就是描述注解的注解。主要有四个元注解，分别是：</p><h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>用于描述注解的使用范围，也就是注解可以用在什么地方，取值有：</p><p>CONSTRUCTOR：用于描述构造器。</p><p>FIELD：用于描述字段。</p><p>LOCAL_VARIABLE：用于描述局部变量。</p><p>METHOD：用于描述方法。</p><p>PACKAGE：用于描述包。</p><p>PARAMETER：用于描述参数。</p><p>TYPE：用于描述类，包括class，interface，enum。 </p><h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><p><strong>表示需要在什么级别保存该注释信息，用于描述注解的生命周期</strong>，取值由枚举RetentionPoicy定义。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110912_d1c105b8_1461398.png" alt="输入图片说明" title="zhujie_5.png"></p><p>SOURCE：在源文件中有效（即源文件保留），仅出现在源代码中，而被编译器丢弃。</p><p>CLASS：在class文件中有效（即class保留），但会被JVM丢弃。</p><p>RUNTIME：JVM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。</p><p>如果只是做一些检查性操作，使用SOURCE，比如@Override，@SuppressWarnings。</p><p>如果要在编译时进行一些预处理操作，就用 CLASS。</p><p>如果需要获取注解的属性值，去做一些运行时的逻辑，可以使用RUNTIME。</p><h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><p>将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。它是一个标记注解，没有成员。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110921_97c3e3c9_1461398.png" alt="输入图片说明" title="zhujie_6.png"></p><h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p>是一个标记注解，用来指定该注解可以被继承。使用 @Inherited 注解的 Class 类，表示这个注解可以被用于该 Class 类的子类。</p><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>下面实战一下，自定义一个注解@LogApi，用于方法上，当被调用时即打印日志，在控制台显示调用方传入的参数和调用返回的结果。</p><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><p>首先定义注解<code>@LogApi</code>，在方法上使用，为了能在反射中读取注解信息，当然是设置为<code>RUNTIME</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogApi &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种没有属性的注解，属于标记注解。</p><p>多说几句，如果需要传递属性值，也可以设置属性值value，比如<code>@RequestMapping</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;path&quot;)</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在使用时。只设置value值，可以忽略value，比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整是@RequestMapping(value = &#123;&quot;/list&quot;&#125;)</span></span><br><span class="line"><span class="comment">//忽略value不写</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">list</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    userMap.put(<span class="string">&quot;1号佳丽&quot;</span>, <span class="string">&quot;李嘉欣&quot;</span>);</span><br><span class="line">    userMap.put(<span class="string">&quot;2号佳丽&quot;</span>, <span class="string">&quot;袁咏仪&quot;</span>);</span><br><span class="line">    userMap.put(<span class="string">&quot;3号佳丽&quot;</span>, <span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">    userMap.put(<span class="string">&quot;4号佳丽&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> userMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标记注解"><a href="#标记注解" class="headerlink" title="标记注解"></a>标记注解</h2><p>刚刚定义完注解之后，就可以在需要的地方标记注解，很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LogApi</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">list</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//业务代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h2><p>最关键的一步来了，解析注解，一般在项目中会使用Spring的AOP技术解析注解，当然如果只需要解析一次的话，也可以使用Spring容器的生命周期函数。</p><p>这里的场景是打印每次方法被调用的日志，所以使用AOP比较合适。</p><p>创建一个切面类<code>LogApiAspect</code>进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogApiAspect</span> </span>&#123;</span><br><span class="line"><span class="comment">//切面点为标记了@LogApi注解的方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(io.github.yehongzhi.user.annotation.LogApi)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;logApi()&quot;)</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//通过反射获取被调用方法的Class</span></span><br><span class="line">        Class type = joinPoint.getSignature().getDeclaringType();</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        String typeName = type.getSimpleName();</span><br><span class="line">        <span class="comment">//获取日志记录对象Logger</span></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(type);</span><br><span class="line">        <span class="comment">//方法名</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取参数列表</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">//参数Class的数组</span></span><br><span class="line">        Class[] clazz = <span class="keyword">new</span> Class[args.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            clazz[i] = args[i].getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过反射获取调用的方法method</span></span><br><span class="line">        Method method = type.getMethod(methodName, clazz);</span><br><span class="line">        <span class="comment">//获取方法的参数</span></span><br><span class="line">        Parameter[] parameters = method.getParameters();</span><br><span class="line">        <span class="comment">//拼接字符串，格式为&#123;参数1:值1,参数2::值2&#125;</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            Parameter parameter = parameters[i];</span><br><span class="line">            String name = parameter.getName();</span><br><span class="line">            sb.append(name).append(<span class="string">&quot;:&quot;</span>).append(args[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.deleteCharAt(sb.lastIndexOf(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行结果</span></span><br><span class="line">        Object res;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行目标方法，获取执行结果</span></span><br><span class="line">            res = joinPoint.proceed();</span><br><span class="line">            logger.info(<span class="string">&quot;调用&#123;&#125;.&#123;&#125;方法成功，参数为[&#123;&#125;]，返回结果[&#123;&#125;]&quot;</span>, typeName, methodName, sb.toString(), JSONObject.toJSONString(res));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;调用&#123;&#125;.&#123;&#125;方法发生异常&quot;</span>, typeName, methodName);</span><br><span class="line">            <span class="comment">//如果发生异常，则抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;调用&#123;&#125;.&#123;&#125;方法，耗时&#123;&#125;ms&quot;</span>, typeName, methodName, (System.currentTimeMillis() - starTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义完切面类后，需要在启动类添加启动AOP的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//添加此注解，开启AOP</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们再在Controller控制层增加一个有参数的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LogApi</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span> String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; user = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    user.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">    user.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;关之琳&quot;</span>);</span><br><span class="line">    user.put(<span class="string">&quot;经典角色&quot;</span>, <span class="string">&quot;十三姨&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> JSONObject.toJSONString(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，然后请求接口<code>list()</code>，我们可以看到控制台出现被调用方法的日志信息。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110929_f73a7e0f_1461398.png" alt="输入图片说明" title="zhujie_7.png"></p><p>请求有参数的接口<code>get()</code>，可以看到参数名称和参数值都被打印在控制台。</p><p><img src="https://images.gitee.com/uploads/images/2021/0914/110937_bc2bcf0a_1461398.png" alt="输入图片说明" title="zhujie_8.png"></p><p>这种记录接口请求参数和返回值的功能，在实际项目中基本上都会使用，因为这能利于系统的排错和性能调优等等。</p><p>我们也可以在这个例子中，学会使用注解和切面编程，可谓是一举两得！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>注解的使用能大大地减少开发的代码量，所以在实际项目的开发中会使用到非常多的注解。特别是做一些公共基础的功能，比如日志记录，事务管理，权限控制这些功能，使用注解就非常高效且优雅。</p><p>对于自定义注解，主要有三个步骤，<strong>定义注解，标记注解，解析注解</strong>，并不是很难。</p><p>这篇文章讲到这里了，感谢大家的阅读，希望看完这篇文章能有所收获！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h1&gt;&lt;p&gt;注解是JDK1.5引入的新特性，主要用于简化代码，提高编程的效率。其实在日常开发中，注解并不少见，比如Java内置的</summary>
      
    
    
    
    <category term="学习" scheme="https://suntf.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://suntf.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://suntf.github.io/2021/09/24/hello-world/"/>
    <id>https://suntf.github.io/2021/09/24/hello-world/</id>
    <published>2021-09-24T03:15:46.939Z</published>
    <updated>2021-09-24T03:15:46.939Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
